events {
    worker_connections 1024;
}

http {
    upstream wireguard_backend {
        server 172.20.0.2:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=instance:10m rate=5r/s;

    # Redirect HTTP to HTTPS (except ACME challenge)
    server {
        listen 80;
        server_name ${DOMAIN};

        # ACME Challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name ${DOMAIN};

        # SSL Configuration with Let's Encrypt certificates
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        
        # SSL Security Configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css; font-src 'self' https://cdnjs.cloudflare.com; img-src 'self' data: https:; connect-src 'self' wss: ws:;" always;

        # Main application - Wireguard Manager
        location / {
            limit_req zone=general burst=20 nodelay;
            
            proxy_pass http://wireguard_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Dynamic routing for instances - /instance/{LOCAL_IP_ADDRESS}/{PORT}/
        location ~ ^/instance/(\d+\.\d+\.\d+\.\d+)/(\d+)/(.*)$ {
            limit_req zone=instance burst=10 nodelay;
            
            set $target_ip $1;
            set $port $2;
            set $path $3;
            
            # Validate IP address format (basic validation)
            if ($target_ip !~ "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$") {
                return 400 "Invalid IP address format";
            }
            
            # Validate port range (1024-65535)
            if ($port !~ "^([1-9][0-9]{3,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$") {
                return 400 "Invalid port number";
            }
            
            # Validate that IP is in allowed range (172.20.0.10-172.20.0.255)
            if ($target_ip !~ "^172\.20\.0\.([1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$") {
                return 403 "IP address not in allowed range (172.20.0.10-255)";
            }
            
            # Additional security: ensure IP is at least 172.20.0.10
            if ($target_ip ~ "^172\.20\.0\.([0-9])$") {
                return 403 "IP address below minimum range (must be >= 172.20.0.10)";
            }
            
            # Resolver for dynamic upstream
            resolver 127.0.0.11 valid=30s ipv6=off;
            set $upstream $target_ip;
            
            # Proxy to the dynamic container
            proxy_pass http://$upstream:$port/$path$is_args$args;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Instance-IP $target_ip;
            proxy_set_header X-Instance-Port $port;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Handle proxy errors
            proxy_intercept_errors on;
            error_page 502 503 504 = @instance_error;
        }

        # Error handling for instance routing
        location @instance_error {
            return 503 "Instance not available or starting up";
            add_header Content-Type text/plain;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}